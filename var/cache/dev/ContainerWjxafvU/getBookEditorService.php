<?php

namespace ContainerWjxafvU;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getBookEditorService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'App\Service\Book\BookEditor' shared autowired service.
     *
     * @return \App\Service\Book\BookEditor
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/src/Service/Book/BookEditor.php';
        include_once \dirname(__DIR__, 4).'/src/Service/Book/UpdateBookCategory.php';
        include_once \dirname(__DIR__, 4).'/src/Service/Category/GetCategory.php';
        include_once \dirname(__DIR__, 4).'/src/Service/Category/CategoryCreator.php';
        include_once \dirname(__DIR__, 4).'/src/Service/Book/UpdateBookAuthor.php';

        $a = ($container->privates['form.factory'] ?? $container->load('getForm_FactoryService'));

        if (isset($container->privates['App\\Service\\Book\\BookEditor'])) {
            return $container->privates['App\\Service\\Book\\BookEditor'];
        }
        $b = ($container->privates['App\\Repository\\CategoryRepository'] ?? $container->load('getCategoryRepositoryService'));

        return $container->privates['App\\Service\\Book\\BookEditor'] = new \App\Service\Book\BookEditor(($container->privates['App\\Repository\\BookRepository'] ?? $container->load('getBookRepositoryService')), $a, ($container->privates['App\\Service\\FileUploader\\FileUploaderS3'] ?? $container->load('getFileUploaderS3Service')), ($container->privates['App\\Service\\Book\\BookFinder'] ?? $container->load('getBookFinderService')), new \App\Service\Book\UpdateBookCategory(new \App\Service\Category\GetCategory($b), new \App\Service\Category\CategoryCreator(($container->privates['debug.validator'] ?? self::getDebug_ValidatorService($container)), $b)), new \App\Service\Book\UpdateBookAuthor(($container->privates['App\\Authors\\Application\\Find\\AuthorFinder'] ?? $container->load('getAuthorFinderService'))));
    }
}
